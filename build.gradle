allprojects {
    apply plugin: 'idea'
    apply plugin: 'groovy'

    defaultTasks 'clean', 'build'

    group                  = 'com.goldin.teamcity'
    version                = '0.0.1-SNAPSHOT'
    sourceCompatibility    = 1.6
    codenarcConfigFile     = rootProject.file( 'codenarc/codenarc.txt'  )
    codenarcReportsDir     = new File( rootProject.buildDir, 'codenarc' )
}


subprojects {

    destinationDir = tasks[ 'jar' ].destinationDir
    destinationZip = new File( destinationDir, "${project.name}.zip" )


    repositories   { mavenRepo urls: 'http://evgeny-goldin.org/artifactory/repo/' }
    configurations { codenarc }
    dependencies   {
        groovy   'org.codehaus.groovy:groovy-all:1.8.0'
        codenarc 'org.codenarc:CodeNarc:0.13',
                 files( rootProject.file( 'codenarc/log4j-xml.jar' ))
        compile  'jetbrains:teamcity-openapi:6.5',
                 'org.springframework:spring-webmvc:3.0.5.RELEASE',
                 'javax:javaee-api:6.0',
                 'com.intellij:annotations:7.0.3',
                 'com.intellij:openapi:7.0.3',
                 'jdom:jdom:1.0'
    }

    /**
     * Compilation options
     */
    tasks.withType( Compile ) {
        options.debug        =  true
        options.compilerArgs << '-Xlint:all'
    }

    /**
     * Creating plugin Zip file
     */
    tasks.withType( Jar ) {
        excludes << 'teamcity-plugin.xml'
        doLast {
            def tempFile = File.createTempFile( project.name, null )
            tempFile.write( file( 'src/main/resources/teamcity-plugin.xml' ).text.
                            replaceAll( '@name@',    project.name    ).
                            replaceAll( '@version@', project.version ))

            ant.zip( destfile: destinationZip ) {
                zipfileset( file: archivePath,                      fullpath: "server/${project.name}.jar"  )
                zipfileset( file: tempFile,                         fullpath: 'teamcity-plugin.xml' )
                zipfileset( file: configurations.groovy.singleFile, prefix:   "server"  )
            }
            assert tempFile.delete()
        }
    }

    /**
     * Copying plugin Zip file to TeamCity instance
     */
    task deploy << {
        def teamCityDir = 'T:/'
        def teamCityZip = new File( teamCityDir, "webapps/ROOT/WEB-INF/plugins/${project.name}.zip" )
        delete( teamCityZip,
                new File( teamCityDir, "webapps/ROOT/WEB-INF/plugins/.unpacked/${project.name}" ),
                new File( teamCityDir, "webapps/ROOT/plugins/${project.name}" ))
        [ 'temp', 'logs', 'work' ].each{ new File( teamCityDir, it ).with{ deleteDir(); mkdirs() }}
        copy { from destinationZip; into teamCityZip.parent; rename { teamCityZip.name }}
    }

    /**
     * Running CodeNarc
     * http://codenarc.sourceforge.net/codenarc-ant-task.html
     */
    task codenarc << {
        assert codenarcConfigFile.isFile()
        assert codenarcReportsDir.isDirectory() || codenarcReportsDir.mkdirs()
        
        ant.taskdef( name     : 'codenarc',
                     classname: 'org.codenarc.ant.CodeNarcTask',
                     classpath: configurations.codenarc.asPath )
        
        ant.codenarc ( ruleSetFiles          : "file:$codenarcConfigFile",
                       maxPriority1Violations: 0,
                       maxPriority2Violations: 0,
                       maxPriority3Violations: 0 ) {
             report  ( type: 'html' ) { option name: 'outputFile', value: ( codenarcReportsDir.path + '/main.html' ) }
             fileset ( dir : 'src/main/groovy' )
        }
    }

    /**
     * Creating IDEA project files
     */
    ideaProject.javaVersion = '1.6.0_25'
    ideaModule {
        javaVersion     = ideaProject.javaVersion
        downloadSources = true
        downloadJavadoc = true
        outputDir       = new File(( File ) project.buildDir, 'idea' )
        testOutputDir   = new File(( File ) project.buildDir, 'idea/test' )
    }

    /**
     * Configuring tests
     */
    test {
        test.testReportDir  = new File(( File ) project.buildDir, 'test/reports' )
        test.testResultsDir = new File(( File ) project.buildDir, 'test/results' )
    }
}