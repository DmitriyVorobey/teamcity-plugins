allprojects {
    apply plugin: 'idea'
    apply plugin: 'groovy'

    defaultTasks 'clean', 'build'

    group               = 'com.goldin.teamcity'
    version             = '0.0.1-SNAPSHOT'
    sourceCompatibility = 1.6

    /**
     * Creating IDEA project files
     */
    ideaProject.javaVersion = '1.6.0_25'
    ideaModule {
        javaVersion     = ideaProject.javaVersion
        downloadSources = true
        downloadJavadoc = true
        outputDir       = new File(( File ) project.buildDir, 'idea' )
        testOutputDir   = new File(( File ) project.buildDir, 'idea/test' )
    }

    /**
     * Configuring tests
     */
    test {
        test.testReportDir  = new File(( File ) project.buildDir, 'test/reports' )
        test.testResultsDir = new File(( File ) project.buildDir, 'test/results' )
    }
}


subprojects {

    File teamCityDir    = new File( 'T:/' )
    File destinationZip = new File( tasks[ 'jar' ].destinationDir, "${project.name}.zip" )

    repositories   { mavenRepo urls: 'http://evgeny-goldin.org/artifactory/repo/' }
    configurations { codenarc }
    dependencies   {
        groovy   'org.codehaus.groovy:groovy-all:1.8.0'
        codenarc ( 'org.codenarc:CodeNarc:0.13' ){ exclude group: 'ant', module: 'ant' }
        codenarc 'org.apache.ant:ant:1.8.2',
                 files( rootProject.file( 'codenarc' ))
        compile  'jetbrains:teamcity-openapi:6.5',
                 'org.springframework:spring-webmvc:3.0.5.RELEASE',
                 'javax:javaee-api:6.0',
                 'com.intellij:annotations:7.0.3',
                 'com.intellij:openapi:7.0.3',
                 'jdom:jdom:1.0'
    }

    /**
     * Compilation options
     */
    tasks.withType( Compile ) {
        options.debug        =  true
        options.compilerArgs << '-Xlint:all'
    }

    /**
     * Creating plugin Zip file
     */
    tasks.withType( Jar ) {
        excludes << 'teamcity-plugin.xml'
        doLast {
            def tempFile = File.createTempFile( project.name, null )
            tempFile.write( file( 'src/main/resources/teamcity-plugin.xml' ).text.
                            replaceAll( '@name@',    project.name    ).
                            replaceAll( '@version@', project.version ))

            ant.zip( destfile: destinationZip ) {
                zipfileset( file: archivePath, fullpath: "server/${project.name}.jar"  )
                zipfileset( file: tempFile,    fullpath: 'teamcity-plugin.xml' )
            }
            assert tempFile.delete()

            /**
             * Adding Groovy jar unless "-PnoGroovy" is specified when running Gradle
             */
            if ( ! project.properties.containsKey( 'noGroovy' ))
            {
                ant.zip( destfile: destinationZip, update: true ) {
                    zipfileset( file: configurations.groovy.singleFile, prefix: 'server' )
                }
            }
        }
    }

    /**
     * Deploys plugin Zip to TeamCity instance
     */
    task deploy() {
        description = 'Deploys plugin Zip to TeamCity instance.'

        doFirst {
            assert destinationZip.isFile()
            assert teamCityDir.isDirectory()

            def teamCityZip = new File( teamCityDir, "webapps/ROOT/WEB-INF/plugins/${project.name}.zip" )
            def logsDir     = new File( teamCityDir, "logs" )
            delete( teamCityZip,
                    new File( teamCityDir, "webapps/ROOT/WEB-INF/plugins/.unpacked/${project.name}" ),
                    new File( teamCityDir, "webapps/ROOT/plugins/${project.name}" ),
                    new File( teamCityDir, "work/Catalina/localhost/_/TC_${project.name}" ),
                    logsDir )
            mkdir( logsDir )
            ant.copy( file: destinationZip, tofile: teamCityZip )
        }
    }

    /**
     * Copies static resources to TeamCity instance
     */
    task copy () {
        description = 'Copies static resources to TeamCity instance.'

        doFirst {
            ant {
                copy( todir  : "${teamCityDir}/webapps/ROOT/plugins/messenger-plugin" ) {
                    fileset( dir : 'src/main/resources/buildServerResources' )
                }
                touch () {
                    fileset( dir : 'src/main/resources/buildServerResources' )
                }
            }
        }
    }

    /**
     * Runs CodeNarc inspections on Groovy sources
     * http://codenarc.sourceforge.net/codenarc-ant-task.html
     */
    task codenarc() {

        description = 'Runs CodeNarc inspections on Groovy sources.'

        doFirst {
            File codenarcConfigFile = rootProject.file( 'codenarc/codenarc.txt'  )
            File codenarcReportsDir = new File(( File ) rootProject.buildDir, 'codenarc' )

            assert codenarcConfigFile.isFile()
            assert codenarcReportsDir.isDirectory() || codenarcReportsDir.mkdirs()

            ant.taskdef( name     : 'codenarc',
                         classname: 'org.codenarc.ant.CodeNarcTask',
                         classpath: configurations.codenarc.asPath )

            ant.codenarc ( ruleSetFiles          : "file:$codenarcConfigFile",
                           maxPriority1Violations: 0,
                           maxPriority2Violations: 0,
                           maxPriority3Violations: 0 ) {
                 report  ( type: 'html' ) { option name: 'outputFile', value: ( codenarcReportsDir.path + '/main.html' ) }
                 fileset ( dir : 'src/main/groovy' )
            }
        }
    }
}