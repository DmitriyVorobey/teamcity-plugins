apply plugin: 'idea'


buildscript {

    final version = project.hasProperty( 'pluginsVersion' ) ? project.pluginsVersion : '0.2.10-SNAPSHOT'
    println "> Using plugins version [$version]"

    repositories { 
        mavenLocal()
        maven { url 'http://jcenter.bintray.com' }
        maven { url 'http://dl.bintray.com/content/evgenyg/BuildTools' }
        maven { url 'http://evgenyg.artifactoryonline.com/evgenyg/repo/' }
    }
    dependencies { classpath "com.github.goldin.plugins.gradle:teamcity:$version",
                             "com.github.goldin.plugins.gradle:about:$version",
                             "com.github.goldin.plugins.gradle:duplicates:$version" }
}


ext.codenarcRuleSetFiles = [ 'codenarc.groovy' ]
ext.codenarcSources      = project.subprojects*.name.collect{[ "$it/src/main/groovy", "$it/src/test/groovy" ]}.flatten()
apply from: 'http://evgenyg.artifactoryonline.com/evgenyg/libs-releases-local/CodeNarc.gradle'
apply from: 'http://evgenyg.artifactoryonline.com/evgenyg/libs-releases-local/wrapper.gradle'

idea.project {
    jdkName = '1.7'
    ipr.withXml { provider -> provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git' }
}


idea.module {
    iml.withXml {
        provider ->
        provider.node.component.content.first().with {
            appendNode( 'excludeFolder', [ url : 'file://$MODULE_DIR$/gradle' ])
            appendNode( 'excludeFolder', [ url : 'file://$MODULE_DIR$/out'    ])
        }
        provider.node.component.first().appendNode( 'orderEntry', [ type : 'library', name : 'Groovy', level: 'application' ])
    }
}


defaultTasks 'duplicates', 'clean', 'codenarc', 'build', 'assembleTeamcityPlugin', 'about', 'install'


subprojects {

    Project p ->

    apply plugin: 'groovy'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'about'
    apply plugin: 'duplicates'
    apply from: 'https://raw.github.com/evgeny-goldin/gradle-plugins/master/teamcity/teamcity.gradle'

    group                = 'com.github.goldin.teamcity'
    version              = '0.3-SNAPSHOT'
    sourceCompatibility  = 1.6
    targetCompatibility  = 1.6

    repositories { maven { url 'http://evgenyg.artifactoryonline.com/evgenyg/repo/' }}

    configurations { compile { extendsFrom teamcityServer }}

    about {
        includeDependencies = [ 'compile', 'runtime' ]
        prefix              = '/'
    }

    duplicates {
        configurations = [ 'runtime' ]
        verbose        = true
    }

    dependencies {
        compile ( 'org.gcontracts:gcontracts-core:1.2.12' ) { exclude group: 'junit' }
        compile localGroovy(),
                'commons-logging:commons-logging-api:1.1'
    }


    clean { delete( "$rootDir/out", "$rootDir/build" ) }


    idea.module {
        downloadSources = true
        downloadJavadoc = false
    }


    assembleTeamcityPlugin.dependsOn jar, test
    assembleTeamcityPluginConfig {
        vendorName   'Evgeny Goldin'
        vendorUrl    'http://evgeny-goldin.com'
        server       p
        artifacts    p
        parameter    name: 'name', value: p.name
    }


    /**
      * Copies plugin's Zip archive into ".BuildServer/plugins".
      */
     task cpz( dependsOn: assembleTeamcityPlugin ) << {

         final pluginsDir = "${ System.getProperty( 'user.home' )}/.BuildServer/plugins"
         final archive    = assembleTeamcityPlugin.archive

         delete( "$pluginsDir/$archive.name" )
         copy { from archive; into pluginsDir }
     }


    /**
      * Copies plugin's static resources into TeamCity instance.
      */
     task cps() << {
         final teamCityApp = [
             System.getProperty( 'TeamCityApp' ),
             System.getenv     ( 'TeamCityApp' ),
             'c:/Winny/java/TeamCity/webapps/bs',
             '/Users/evgenyg/app/java/TeamCity/webapps/bs'
         ].grep().find { new File( it ).directory }

         copy {
             from 'src/main/resources/buildServerResources'
             into "$teamCityApp/plugins/${ p.name }"
         }
     }
}


project( ':console' ) {
    assembleTeamcityPluginConfig {
        displayName 'Console Plugin'
        description 'Plugin allowing to evaluate various code snippets in TeamCity environment'
    }
}


project( ':matrix-runner' ) {
    assembleTeamcityPluginConfig {
        displayName 'Matrix Runner Plugin'
        description 'Plugin allowing to build other projects using matrix parameters'
    }
}
